// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"

  url       = env("POSTGRES_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  emailVerified DateTime?
  image         String?
  username      String?
  settings      Json?
  role          UserRole  @default(USER)

  accounts    Account[]
  sessions    Session[]
  memberships Membership[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum MembershipRole {
  OWNER
  MEMBER
  CUSTOMER
}

model Membership {
  id String @id @default(uuid())

  role     MembershipRole
  settings Json?          @default("{}")

  contracts        Contract[]
  disputes         Dispute[]
  publications     Publication[]
  sentMessages     Message[]     @relation("MessageSender")
  receivedMessages Message[]     @relation("MessageReceiver")

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([tenantId, userId])
}

model Tenant {
  id   String  @id @default(uuid())
  name String
  logo String?
  slug String  @unique

  memberships  Membership[]
  invites      Invite[]
  contracts    Contract[]
  disputes     Dispute[]
  transactions Transaction[]
  publications Publication[]

  settings Json? @default("{}")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Invite {
  id String @id @default(uuid())

  email String
  role  MembershipRole

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  expiresAt  DateTime
  acceptedAt DateTime?

  @@unique([tenantId, email])
}

enum PublicationStatus {
  DRAFT
  PENDING_CLIENT_APPROVAL
  CLIENT_APPROVED
  CONTRACT_SIGNED
  PAYMENT_RECEIVED
  IN_PROGRESS
  COMPLETED
  PENDING_FINAL_APPROVAL
  DISPUTED
  CLOSED
}

model Publication {
  id     String            @id @default(uuid())
  status PublicationStatus @default(DRAFT)

  details Json? @default("{}")

  messages     Message[]
  transactions Transaction[]

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  customerId String
  customer   Membership @relation(fields: [customerId], references: [id])

  disputeId String?  @unique
  dispute   Dispute?

  contractId String?   @unique
  contract   Contract?

  reviewId String? @unique
  review   Review?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  startDate DateTime?
  endDate   DateTime?
}

enum DisputeStatus {
  OPEN
  RESOLVED_FAVOR_CLIENT
  RESOLVED_FAVOR_INFLUENCER
  CLOSED
}

model Dispute {
  id String @id @default(uuid())

  reason      String
  resolution  String?
  attachments Json?
  status      DisputeStatus

  createdById String
  createdBy   Membership @relation(fields: [createdById], references: [id])

  tenant   Tenant? @relation(fields: [tenantId], references: [id])
  tenantId String?

  publicationId String?      @unique
  publication   Publication? @relation(fields: [publicationId], references: [id])

  resolvedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Contract {
  id             String    @id @default(uuid())
  content        Json?     @default("{}")
  url            String?
  signedByClient Boolean   @default(false)
  signedDate     DateTime?

  transactions Transaction[]

  publication   Publication @relation(fields: [publicationId], references: [id])
  publicationId String      @unique

  tenantId String?
  tenant   Tenant? @relation(fields: [tenantId], references: [id])

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Membership   Membership? @relation(fields: [membershipId], references: [id])
  membershipId String?
}

enum TransactionType {
  INCOME
  WITHDRAWAL
  FEE
  REFUND
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum PaymentMethod {
  PIX
  CREDIT_CARD
  BANK_TRANSFER
  BILLET
}

model Transaction {
  id             String            @id @default(uuid())
  amount         Float
  type           TransactionType
  status         TransactionStatus
  paymentMethod  PaymentMethod?
  paymentDetails Json?

  description String?

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  contract   Contract? @relation(fields: [contractId], references: [id])
  contractId String?

  publicationId String?
  publication   Publication? @relation(fields: [publicationId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id      String  @id @default(uuid())
  rating  Int
  comment String?

  publicationId String?      @unique
  publication   Publication? @relation(fields: [publicationId], references: [id])

  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id      String @id @default(uuid())
  content String

  senderId String?
  sender   Membership? @relation(fields: [senderId], references: [id], onDelete: SetNull, name: "MessageSender")

  receiverId String
  receiver   Membership @relation(fields: [receiverId], references: [id], onDelete: Cascade, name: "MessageReceiver")

  publicationId String?
  publication   Publication? @relation(fields: [publicationId], references: [id])

  createdAt DateTime @default(now())
}
