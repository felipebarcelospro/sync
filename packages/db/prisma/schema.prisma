// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"

  url       = env("POSTGRES_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  emailVerified DateTime?
  image         String?
  username      String?
  settings      Json?
  role          UserRole  @default(USER)

  accounts    Account[]
  sessions    Session[]
  memberships Membership[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum MembershipRole {
  owner
  member
}

model Membership {
  id String @id @default(uuid())

  role MembershipRole

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([tenantId, userId])
}

model Tenant {
  id   String  @id @default(uuid())
  name String
  logo String?
  slug String  @unique

  memberships   Membership[]
  invites       Invite[]
  subscriptions Subscription[]

  settings Json

  paymentProviderId String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Invite {
  id String @id @default(uuid())

  email String
  role  MembershipRole

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  expiresAt  DateTime
  acceptedAt DateTime?

  @@unique([tenantId, email])
}

model Plan {
  id                String  @id @default(uuid())
  name              String
  description       String?
  active            Boolean @default(true)
  paymentProviderId String  @unique

  prices PlanPrice[]

  metadata Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PlanPriceInterval {
  day
  week
  month
  year
}

enum PlanPriceType {
  one_time
  recurring
}

model PlanPrice {
  id              String            @id @default(uuid())
  price           Int // Assuming price is in the smallest currency unit (e.g., cents)
  currency        String
  active          Boolean           @default(true)
  interval        PlanPriceInterval @default(month)
  intervalCount   Int?
  trialPeriodDays Int?
  type            PlanPriceType     @default(recurring)
  subscriptions   Subscription[]

  paymentProviderId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  planId String
  plan   Plan   @relation(fields: [planId], references: [id], onDelete: Cascade)
}

model Subscription {
  id String @id @default(uuid())

  paymentProviderId String? @unique // Campo adicionado para armazenar o ID da assinatura do Stripe

  status String // Campo adicionado para armazenar o status da assinatura

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  priceId String
  price   PlanPrice @relation(fields: [priceId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  endedAt   DateTime?

  trialStart DateTime?
  trialEnd   DateTime?

  cancelAtPeriodEnd Boolean?
  cancelAt          DateTime?
  canceledAt        DateTime?

  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
}
